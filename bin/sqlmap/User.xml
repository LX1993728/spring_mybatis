<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间，为了对SQL语句进行隔离，方便管理，mapper可开发dao方式，使用namespace有特殊作用 
mapper代理开发时将namespace指定为mapper接口的全限定名 -->
<mapper namespace="test">
<!-- 在mapper.xml文件中配置很多的SQL语句，执行每个SQL语句时，封装为MappedStatement对象
mapper.xml以statement为单位管理SQL语句
 -->
 
 <!-- 根据id查询用户信息 -->
 <!-- 
    id: 唯一标识一个statement
    #{}：表示一个占位符，如果#{} 中传入简单类型的参数，#{}中的名称随意
    parameterType: 输入参数的类型，通过#{}接收parameterType输入的参数
    resultType：输出结果类型，指定单条记录映射的pojo类型
  -->
  <select id="findUserById" parameterType="int" resultType="test.lx.mybatis.po.User">
     SELECT * FROM USER WHERE id=#{id};
  </select>
  
  <!-- 根据用户名称查询用户信息，可能返回多条 
  ${}:表示SQL的拼接，通过${}接收参数，将参数的内容不加任何修饰的拼接在SQL中
  -->
  <select id="findUserByName" parameterType="java.lang.String" resultType="test.lx.mybatis.po.User">
       select * from user where username like '%${value}%' 
  </select>
  
  <select id="findUserByName2" parameterType="java.lang.String" resultType="test.lx.mybatis.po.User">
       select * from user where username like #{username} 
  </select>
  
  <!-- 添加用户 
   parameterType:输入参数的类型，User对象包括username,birthday,sex,address
   #{}接收pojo数据,可以使用OGNL解析出pojo的属性值
   #{username}表示从parameterType中获取pojo的属性值
   <selectKey>:用于进行主键返回，定义了主键值的SQL
   order：设置selectKey标签中SQL的执行顺序，相对于insert语句而言
   keyProperty： 将主键设置到哪个属性上
   resultType：select LAST_INSERT_ID()的结果类型
  -->
  <insert id="insertUser" parameterType="test.lx.mybatis.po.User">
     <selectKey keyProperty="id" order="AFTER" resultType="int">
        select LAST_INSERT_ID()
     </selectKey>
 	 INSERT INTO USER(username,birthday,sex,address) VALUES(#{username},#{birthday},#{sex},#{address})
  </insert>
  
  <!-- mysql的uuid()函数生成主键 -->
 <!--  <insert id="insertUser" parameterType="test.lx.mybatis.po.User">
     <selectKey keyProperty="id" order="BEFORE" resultType="string">
        select uuid()
     </selectKey>
 	 INSERT INTO USER(username,birthday,sex,address) VALUES(#{username},#{birthday},#{sex},#{address})
  </insert> -->
  
  <!-- oracle
         在执行insert之前执行select 序列.nextval() from dual取出序列最大值，将值设置到user对象的id属性中
   -->
 <!--  <insert id="insertUser" parameterType="test.lx.mybatis.po.User">
     <selectKey keyProperty="id" order="BEFORE" resultType="int">
        select 序列.nextval() from dual
     </selectKey>
 	 INSERT INTO USER(username,birthday,sex,address) VALUES(#{username},#{birthday},#{sex},#{address})
  </insert> -->
  
  <!-- 用户删除 -->
  <delete id="deleteUser" parameterType="int">
   delete from user where id=#{id}
  </delete>
  <!-- 用户更新
  	要求：传入的user对象包括id属性值
   -->
   <update id="updateUser" parameterType="test.lx.mybatis.po.User">
   update user set username = #{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}
   </update>
</mapper>